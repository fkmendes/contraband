<!-- Build contraband. It is also used by Hudson contraband project. JUnit test is available for this build. -->
<project basedir="." default="build_jar_all_contraband" name="BUILD_contraband">
	<description>
	    Build contraband.
	    JUnit test is available for this build.
	    $Id: build_contraband.xml $
	</description>

	<!-- set global properties for this build -->
	<property name="versioncontraband" value="1.0.1" />
	<property name="srccontraband" location="src" />
	<property name="doccontraband" location="doc" />
	<property name="buildcontraband" location="build" />
	<property name="libcontraband" location="lib" />
	<property name="release_dir" value="release" />
	<property name="distcontraband" location="${buildcontraband}/dist" />
	<property name="beast2path" location="../beast2"/>
	<property name="libBeast2" location="${beast2path}/lib" />
	<property name="srcBeast2" location="${beast2path}/src" />
	<property name="beast2classpath" location="${beast2path}/build" />
	<property name="Add_on_dir" value="${release_dir}/add-on" />

    <import file="${beast2path}/build.xml" />

	<property name="main_class_CladeAge" value="beast.app.ca.contrabandPanel" />
	<property name="report" value="${buildcontraband}/junitreport"/>

	<path id="classpath">
        <pathelement path="${buildcontraband}"/>
		<fileset dir="${libBeast2}" includes="junit/junit-platform-console-standalone-1.8.2.jar"/>
		<fileset dir="${libBeast2}" includes="jam.jar"/>
		<fileset dir="${libBeast2}" includes="commons-math3-3.6.1.jar"/>
		<pathelement path="${beast2classpath}"/>
		<fileset dir="${beast2path}/lib" includes="jam.jar"/>
		<fileset dir="${beast2path}/lib" includes="beagle.jar"/>
		<fileset dir="${beast2path}/lib" includes="fest.jar"/>
		<fileset dir="${beast2path}/lib" includes="colt.jar"/>
		<fileset dir="${libcontraband}" includes="commons-lang3-3.10.jar"/>
	<pathelement path="../BeastFX/build"/>
	<fileset dir="../BeastFX/locallib" includes="*.jar"/>
	</path>




	<!-- start -->
	<target name="initcontraband">
		<echo message="${ant.project.name}: ${ant.file}" />
	</target>

	<target name="cleancontraband">
    	<delete dir="${buildcontraband}" />
	</target>

	<!-- clean previous build, and then compile Java source code, and Juint test -->
	<target name="build_all_contraband" depends="cleancontraband,compile-allcontraband,junitcontraband"
        description="Clean and Build all run-time stuff">
	</target>

	<!-- clean previous build, compile Java source code, and Junit test, and make the beast.jar and beauti.jar -->
	<target name="build_jar_all_contraband" depends="cleancontraband,compile-allcontraband,junitcontraband,dist_all_contraband,addon"
        description="Clean and Build all run-time stuff">
	</target>


	<!-- No JUnit Test, clean previous build, compile Java source code, and make the contraband.jar and beauti.jar -->
	<target name="build_jar_all_contraband_NoJUnitTest" depends="cleancontraband,compile-allcontraband,dist_all_contraband"
        description="Clean and Build all run-time stuff">
	</target>

	<!-- compile Java source code -->
	<target name="compile-allcontraband" depends="initcontraband,compile-all">


	    <!-- Capture the path as a delimited property using the refid attribute -->
	    <property name="myclasspath" refid="classpath"/>
	    <!-- Emit the property to the ant console -->
	    <echo message="Classpath = ${myclasspath}"/>

		<mkdir dir="${buildcontraband}" />

		<!-- Compile the java code from ${srccontraband} into ${buildcontraband} /bin -->
		<javac srcdir="${srccontraband}" destdir="${buildcontraband}" classpathref="classpath"
		       fork="true"
		       memoryinitialsize="256m"
		       memorymaximumsize="256m"
			   source="1.8"
		       target="1.8">
			<include name="**/**" />
			<!-- compile JUnit test classes -->
			<include name="test/beast/**" />
		</javac>
		<copy todir="${buildcontraband}">
			<fileset dir="${srccontraband}" includes="**/*.png" />
		</copy>
		<echo message="Successfully compiled." />
	</target>

	<!-- make the beast.jar and beauti.jar -->
	<target name="dist_all_contraband" depends="compile-allcontraband" description="create contraband jar">
		<!-- Create the distribution directory -->
		<mkdir dir="${distcontraband}" />

		<!-- Put everything in ${buildcontraband} into the beast.jar file -->
		<jar jarfile="${distcontraband}/contraband.jar">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Main-Class" value="${main_class_CladeAge}" />
			</manifest>
			<fileset dir="${buildcontraband}">
				<include name="**/*.class" />
				<include name="**/*.png" />
			</fileset>
			<fileset dir="${beast2classpath}">
				<include name="**/*.class" />
				<include name="**/*.properties" />
				<include name="**/*.png" />
			</fileset>
			<zipgroupfileset dir="${libBeast2}" includes="jam.jar" />
			<zipgroupfileset dir="${libBeast2}" includes="beagle.jar" />
			<zipgroupfileset dir="${libBeast2}" includes="colt.jar" />
			<zipgroupfileset dir="${libBeast2}" includes="commons-math3-3.1.1.jar" />
			<zipgroupfileset dir="${libBeast2}" includes="antlr-runtime-4.7.jar" />
		</jar>
		<jar jarfile="${distcontraband}/contraband.src.jar">
			<fileset dir="${srccontraband}">
				<include name="**/*.java" />
				<include name="**/*.png" />
				<include name="**/*.xsl" />
			</fileset>
        </jar>
		<jar jarfile="${distcontraband}/contraband.addon.jar">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
			</manifest>
			<fileset dir="${buildcontraband}">
				<include name="**/*.png" />
				<include name="**/*.class" />
				<include name="**/*.class" />
				<include name="**/*.properties" />
			</fileset>
		</jar>
	</target>

	<!-- run beast.jar -->
	<target name="run_contraband">
		<java jar="${distcontraband}/contraband.jar" fork="true" />
	</target>


	<!-- JUnit test -->
	<target name="junitcontraband">
		<mkdir dir="${report}" />
		<junit printsummary="yes"> <!--showoutput='yes'-->
			<classpath>
				<path refid="classpath" />
				<path location="${buildcontraband}" />
			</classpath>

			<formatter type="xml" />

			<batchtest fork="yes" todir="${report}">
				<fileset dir="${srccontraband}">
                    <include name="test/**/*Test.java"/>
				</fileset>
				<fileset dir="${srcBeast2}">
                    <include name="test/beast/integration/**/*Test.java"/>
                    <exclude name="test/beast/integration/**/ResumeTest.java"/>
				</fileset>
			</batchtest>
		</junit>
		<echo message="JUnit test finished." />
	</target>



	<target name="addon"
	        depends="build_jar_all_contraband_NoJUnitTest"
	        description="release BEAST 2 add-on version of contraband">

		<delete dir="${Add_on_dir}" />
		<!-- Create the release directory -->
		<mkdir dir="${Add_on_dir}" />
		<mkdir dir="${Add_on_dir}/lib" />
		<mkdir dir="${Add_on_dir}/doc" />
		<mkdir dir="${Add_on_dir}/examples" />
		<mkdir dir="${Add_on_dir}/fxtemplates" />

		<copy todir="${Add_on_dir}">
			<fileset file="version.xml"/>
		</copy>
		<copy todir="${Add_on_dir}/examples">
			<fileset dir="examples" />
		</copy>
		<!--
		<copy todir="${Add_on_dir}/doc">
			<fileset dir="doc" includes="contraband.pdf"/>
		</copy>
		-->
		<copy todir="${Add_on_dir}/lib">
			<fileset dir="${distcontraband}" includes="contraband.addon.jar" />
		</copy>
		<copy todir="${Add_on_dir}">
			<fileset dir="${distcontraband}" includes="contraband.src.jar" />
		</copy>


		<copy todir="${Add_on_dir}/fxtemplates">
			<fileset file="fxtemplates/*.xml" />
		</copy>


		<jar jarfile="${distcontraband}/contraband.addon.v${versioncontraband}.zip">
			<fileset dir="${Add_on_dir}">
				<include name="**/*" />
			</fileset>
        </jar>
		<echo message="Add-on version v${versioncontraband} release is finished." />
	</target>



</project>
