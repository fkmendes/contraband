<beast version='2.0'
       namespace='beast.app.beauti:beast.pkgmgmt:beast.base.core:beast.base.inference:beast.base.evolution.branchratemodel:beast.base.evolution.speciation:beast.evolution.Tree.t:coalescent:beast.base.util:beast.base.math:beast.evolution.nuc:beast.base.evolution.operator:beast.base.inference.operator:beast.base.evolution.sitemodel:beast.base.evolution.substitutionmodel:beast.base.evolution.likelihood:beast.evolution:beast.base.math.distributions'>


    <mergewith point='aux-partitions-panels'>

        <panel spec="beastfx.app.inputeditor.BeautiPanelConfig" panelname="Continuous Model"
               tiptext="Brownian motion model specifications"
               path=""
               type="contraband.prunelikelihood.BMPruneLikelihood"
               hasPartitions="Tree" icon="3.pngx" forceExpansion="TRUE"/>


        <alignmentProvider id="Add Continuous Data" spec="contraband.app.beauti.BeautiContrabandAlignmentProvider" template="@contTrait"/>

        <subtemplate id='contTrait' class='beast.base.evolution.alignment.Alignment' mainid='$(n)'
                     suppressInputs = 'contraband.prunelikelihood.BMPruneLikelihood.siteModel,
                     contraband.prunelikelihood.BMPruneLikelihood.tree,
                     contraband.prunelikelihood.BMPruneLikelihood.data,
                     contraband.prunelikelihood.BMPruneLikelihood.branchRateModel,
                     contraband.math.NodeMath.traits,
                     contraband.math.NodeMath.shrinkage,
                     contraband.math.NodeMath.covariance,
                     contraband.math.NodeMath.tree'
        >
            <![CDATA[
			<tree id="Tree.t:$(n)" name="stateNode">
				<taxonset id="TaxonSet.$(n)" spec="beast.base.evolution.alignment.TaxonSet" alignment="@$(n)"/>
			</tree>
			<plugin spec='SiteModel' id="SiteModel.s:$(n)" gammaCategoryCount='0'>
				<substModel spec='JukesCantor' id='JC69.s:$(n)' />
				<proportionInvariant spec='parameter.RealParameter' id='proportionInvariant.s:$(n)' value='0.0' lower='0' upper='1' estimate='false'/>
				<mutationRate        spec='parameter.RealParameter' id='mutationRate.s:$(n)' value='1.0' lower="0.0" estimate='false'/>
				<shape               spec='parameter.RealParameter' id='gammaShape.s:$(n)' value='1.0' lower='0.1' estimate='false'/>
			</plugin>

			<plugin id="pcmNodeMath.c:$(n)" spec="contraband.math.NodeMath" traits="@$(n)" tree="@Tree.t:$(n)">
            	<sigmasq id="varValues.t:$(n)" spec="parameter.RealParameter">1.0</sigmasq>
            	<correlation id="covValues.t:$(n)" spec="parameter.RealParameter" lower='-1.0' upper='1.0'>0.1</correlation>
                <rootValues id="rootValues.t:$(n)" spec="parameter.RealParameter">0.0</rootValues>
            </plugin>

            <plugin spec='YuleModel' id="YuleModel.t:$(n)" tree='@Tree.t:$(n)'>
                <parameter name='birthDiffRate' id="birthRate.t:$(n)" lower="0.0" value='1.0' estimate='true'/>
            </plugin>


			<distribution spec='contraband.prunelikelihood.BMPruneLikelihood' id="contTreeLikelihood.$(n)" data="@$(n)">
            <tree idref="Tree.t:$(n)"/>
            <nodeMath idref="pcmNodeMath.c:$(n)"/>
            <branchRateModel spec='StrictClockModel' id='StrictClock.c:$(n)'>
               <clock.rate id='clockRate.c:$(n)' spec='parameter.RealParameter' lower="0.0" value='1.0' estimate='false'/>
            </branchRateModel>
            </distribution>
            <tree spec='beast.base.evolution.tree.coalescent.RandomTree' id='RandomTree.t:$(n)' estimate='false' initial="@Tree.t:$(n)">
                <taxa idref='data'/>
                <populationModel id='ConstantPopulation0.t:$(n)' spec='ConstantPopulation'>
            		<popSize id='randomPopSize.t:$(n)' spec='parameter.RealParameter' value='1'/>
	            </populationModel>
            </tree>

            <operator id='allTipDatesRandomWalker.t:$(n)' spec='TipDatesRandomWalker' windowSize="1" weight="0" tree="@Tree.t:$(n)"/>

 		    <operator id="YuleModelBICEPSEpochTop.t:$(n)" spec="beast.base.evolution.operator.EpochFlexOperator" tree="@Tree.t:$(n)" weight="2.0" scaleFactor="0.1"/>
            <operator id="YuleModelBICEPSEpochAll.t:$(n)" spec="beast.base.evolution.operator.EpochFlexOperator" tree="@Tree.t:$(n)" weight="2.0" scaleFactor="0.1" fromOldestTipOnly="false"/>
            <operator id="YuleModelBICEPSTreeFlex.t:$(n)" spec="beast.base.evolution.operator.TreeStretchOperator" scaleFactor="0.01" tree="@Tree.t:$(n)" weight="2.0"/>
            <operator id='YuleModelTreeRootScaler.t:$(n)' spec='kernel.BactrianScaleOperator' scaleFactor="0.5" weight="3" tree="@Tree.t:$(n)" rootOnly='true'/>
            <operator id='YuleModelUniformOperator.t:$(n)' spec='kernel.BactrianNodeOperator' weight="30" tree="@Tree.t:$(n)"/>
            <operator id='YuleModelSubtreeSlide.t:$(n)' spec='kernel.BactrianSubtreeSlide' weight="15" size="1.0" tree="@Tree.t:$(n)"/>
            <operator id='YuleModelNarrow.t:$(n)' spec='Exchange' isNarrow='true' weight="15" tree="@Tree.t:$(n)"/>
            <operator id='YuleModelWide.t:$(n)' spec='Exchange' isNarrow='false' weight="3" tree="@Tree.t:$(n)"/>
            <operator id='YuleModelWilsonBalding.t:$(n)' spec='WilsonBalding' weight="3" tree="@Tree.t:$(n)"/>

    		<operator id='YuleBirthRateScaler.t:$(n)' spec='kernel.BactrianScaleOperator' scaleFactor="0.75" weight="3" parameter="@birthRate.t:$(n)"/>
			<operator id="varValuesScaler.t:$(n)" spec='kernel.BactrianScaleOperator' scaleFactor="0.5" weight="10.0" parameter="@varValues.t:$(n)"/>
        	<operator id="covValuesScaler.t:$(n)" spec='kernel.BactrianScaleOperator' scaleFactor="0.5" weight="10.0" parameter="@covValues.t:$(n)"/>
        	<operator id="rootValuesScaler.t:$(n)" spec='kernel.BactrianScaleOperator' scaleFactor="0.5" weight="10.0" parameter="@rootValues.t:$(n)"/>
        	<operator id="varValuesRandomWalker.t:$(n)" spec='beast.base.inference.operator.RealRandomWalkOperator' windowSize="0.5" weight="10.0" parameter="@varValues.t:$(n)"/>
        	<operator id="covValuesRandomWalker.t:$(n)" spec='beast.base.inference.operator.RealRandomWalkOperator' windowSize="0.1" weight="10.0" parameter="@covValues.t:$(n)"/>
        	<operator id="rootValuesRandomWalker.t:$(n)" spec='beast.base.inference.operator.RealRandomWalkOperator' windowSize="0.5" weight="10.0" parameter="@rootValues.t:$(n)"/>

        	<operator id='StrictClockRateScalerX.c:$(n)' spec='kernel.BactrianScaleOperator' scaleFactor="0.75" weight="3" parameter='@clockRate.c:$(n)'/>
			<operator id='strictClockUpDownOperatorX.c:$(n)' spec='kernel.BactrianUpDownOperator' scaleFactor="0.75" weight="3">
				<up idref="clockRate.c:$(n)"/>
				<down idref="Tree.t:$(n)"/>
			</operator>

   			<prior id='YuleBirthRatePrior.t:$(n)' x='@birthRate.t:$(n)'><distr spec="beast.base.inference.distribution.Uniform" lower='0' upper='Infinity'/></prior>

			<prior id="varValuesPrior.t:$(n)" name="distribution" x="@varValues.t:$(n)">
    			<LogNormal meanInRealSpace="false" name="distr">
        			<M spec="parameter.RealParameter" estimate="false">0.2</M>
        			<S spec="parameter.RealParameter" estimate="false">0.5</S>
	    		</LogNormal>
    		</prior>

			<prior id="covValuesPrior.t:$(n)" name="distribution" x="@covValues.t:$(n)">
        		<distr spec="beast.base.inference.distribution.Beta">
            		<parameter name='alpha' value="2.0" estimate='false'/>
            		<parameter name='beta' value="2.0" estimate='false'/>
        		</distr>
    		</prior>

			<prior id="rootValuesPrior.t:$(n)" name="distribution" x="@rootValues.t:$(n)">
        		<distr spec="beast.base.inference.distribution.Normal">
            		<parameter name='mean' value="0.0" estimate='false'/>
            		<parameter name='sigma' value="0.5" estimate='false'/>
        		</distr>
    		</prior>

			<logger id='treelog.t:$(n)' spec='beast.base.inference.Logger' logEvery="10000" fileName="$(tree).trees" mode='tree'>
				<log id='TreeWithMetaDataLogger.t:$(n)' spec='beast.base.evolution.TreeWithMetaDataLogger' tree='@Tree.t:$(n)'>
				</log>
			</logger>
		]]>
            <connect srcID="contTreeLikelihood.$(n)" targetID="likelihood" inputName="distribution" if="isInitializing"/>
            <connect srcID='YuleModel.t:$(n)'        targetID='prior' inputName='distribution' if="isInitializing"/>

            <connect srcID='treelog.t:$(n)'          targetID='mcmc' inputName='logger' if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='RandomTree.t:$(n)'       targetID='mcmc' inputName='init'   if='isInitializing'/>
            <connect method="beastfx.app.beauti.StateNodeInitialiserListInputEditor.customConnector"/>

            <connect srcID='ClockPrior.c:$(n)'            targetID='prior' inputName='distribution' if='inlikelihood(clockRate.c:$(n)) and clockRate.c:$(n)/estimate=true'/>
            <connect srcID='YuleBirthRatePrior.t:$(n)'    targetID='prior' inputName='distribution' if='inposterior(YuleModel.t:$(n)) and inposterior(Tree.t:$(n)) and birthRate.t:$(n)/estimate=true'>Prior on Yule birth rate for partition s:$(n)</connect>
            <connect srcID='varValuesPrior.t:$(n)'        targetID='prior' inputName='distribution' if='inposterior(contTreeLikelihood.$(n)) and inposterior(varValues.t:$(n)) and varValues.t:$(n)/estimate=true'>Prior on trait evolutionary rate for partition s:$(n)</connect>
            <connect srcID='covValuesPrior.t:$(n)'        targetID='prior' inputName='distribution' if='inposterior(contTreeLikelihood.$(n)) and inposterior(covValues.t:$(n)) and covValues.t:$(n)/estimate=true'>Prior on trait correlations for partition s:$(n)</connect>
            <connect srcID='rootValuesPrior.t:$(n)'       targetID='prior' inputName='distribution' if='inposterior(contTreeLikelihood.$(n)) and inposterior(rootValues.t:$(n)) and rootValues.t:$(n)/estimate=true'>Prior on trait root values for partition s:$(n)</connect>

            <connect srcID='Tree.t:$(n)'                  targetID='state' inputName='stateNode' if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='clockRate.c:$(n)'             targetID='state' inputName='stateNode' if='inlikelihood(clockRate.c:$(n)) and clockRate.c:$(n)/estimate=true'/>
            <connect srcID='birthRate.t:$(n)'             targetID='state' inputName='stateNode' if='inposterior(YuleModel.t:$(n)) and inposterior(Tree.t:$(n)) and birthRate.t:$(n)/estimate=true'/>
            <connect srcID='varValues.t:$(n)'             targetID='state' inputName='stateNode' if='inlikelihood(varValues.t:$(n)) and varValues.t:$(n)/estimate=true'/>
            <connect srcID='covValues.t:$(n)'             targetID='state' inputName='stateNode' if='inlikelihood(covValues.t:$(n)) and covValues.t:$(n)/estimate=true'/>
            <connect srcID='rootValues.t:$(n)'            targetID='state' inputName='stateNode' if='inlikelihood(rootValues.t:$(n)) and rootValues.t:$(n)/estimate=true'/>

            <connect srcID='StrictClockRateScaler.c:$(n)'     targetID='mcmc' inputName='operator' if='inlikelihood(clockRate.c:$(n)) and clockRate.c:$(n)/estimate=true'>Scale clock rate of partition c:$(n)</connect>
            <connect srcID='YuleBirthRateScaler.t:$(n)'       targetID='mcmc' inputName='operator' if='inposterior(birthRate.t:$(n)) and birthRate.t:$(n)/estimate=true'>Scales birth rate of Yule prior for partition t:$(n)</connect>
            <connect srcID='strictClockUpDownOperator.c:$(n)' targetID='mcmc' inputName='operator'
                     if='inlikelihood(clockRate.c:$(n)) and inlikelihood(Tree.t:$(n)) and Tree.t:$(n)/estimate=true and clockRate.c:$(n)/estimate=true'>
                Scale up substitution rate c:$(n) and scale down tree t:($n)
            </connect>
            <connect srcID='varValuesScaler.t:$(n)'  targetID='mcmc' inputName='operator' if='inlikelihood(varValues.t:$(n)) and varValues.t:$(n)/estimate=true'>Scales trait evolutionary rates</connect>
            <connect srcID='covValuesScaler.t:$(n)'  targetID='mcmc' inputName='operator' if='inlikelihood(covValues.t:$(n)) and covValues.t:$(n)/estimate=true'>Scales trait correlations</connect>
            <connect srcID='rootValuesScaler.t:$(n)' targetID='mcmc' inputName='operator' if='inlikelihood(rootValues.t:$(n)) and rootValues.t:$(n)/estimate=true'>Scales trait values at root of tree $(n)</connect>

            <connect srcID='varValuesRandomWalker.t:$(n)'  targetID='mcmc' inputName='operator' if='inlikelihood(varValues.t:$(n)) and varValues.t:$(n)/estimate=true'>Randomly samples trait evolutionary rates</connect>
            <connect srcID='covValuesRandomWalker.t:$(n)'  targetID='mcmc' inputName='operator' if='inlikelihood(covValues.t:$(n)) and covValues.t:$(n)/estimate=true'>Randomly samples trait correlations</connect>
            <connect srcID='rootValuesRandomWalker.t:$(n)' targetID='mcmc' inputName='operator' if='inlikelihood(rootValues.t:$(n)) and rootValues.t:$(n)/estimate=true'>Randomly samples trait values at root of tree $(n)</connect>

            <connect srcID='allTipDatesRandomWalker.t:$(n)'   targetID='mcmc' inputName='operator' if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true and allTipDatesRandomWalker.t:$(n)/weight!=0.0'>Estimates tip dates for tree t:$(n)</connect>
            <connect srcID="YuleModelTreeRootScaler.t:$(n)"   targetID="mcmc" inputName="operator" if="inposterior(YuleModel.t:$(n)) and Tree.t:$(n)/estimate=true" >Scales root node for tree t:$(n)</connect>
            <connect srcID="YuleModelUniformOperator.t:$(n)"  targetID="mcmc" inputName="operator" if="inposterior(YuleModel.t:$(n)) and Tree.t:$(n)/estimate=true" >Draws new internal node heights uniformally for tree t:$(n)</connect>
            <connect srcID="YuleModelSubtreeSlide.t:$(n)"     targetID="mcmc" inputName="operator" if="inposterior(YuleModel.t:$(n)) and Tree.t:$(n)/estimate=true" >Performs subtree slide rearrangement of tree t:$(n)</connect>
            <connect srcID="YuleModelNarrow.t:$(n)"           targetID="mcmc" inputName="operator" if="inposterior(YuleModel.t:$(n)) and Tree.t:$(n)/estimate=true" >Narrow exchange performs local rearrangement of tree t:$(n)</connect>
            <connect srcID="YuleModelWide.t:$(n)"             targetID="mcmc" inputName="operator" if="inposterior(YuleModel.t:$(n)) and Tree.t:$(n)/estimate=true" >Wide exchange performs global rearrangement of tree t:$(n)</connect>
            <connect srcID="YuleModelWilsonBalding.t:$(n)"    targetID="mcmc" inputName="operator" if="inposterior(YuleModel.t:$(n)) and Tree.t:$(n)/estimate=true" >Performs Wilson-Balding global rearrangement of tree t:$(n)</connect>
            <connect srcID='YuleModelBICEPSEpochTop.t:$(n)'   targetID='mcmc' inputName='operator' if='inposterior(YuleModel.t:$(n)) and Tree.t:$(n)/estimate=true'>Epoch operator that only scale internal nodes above least recent node for tree t:$(n)</connect>
            <connect srcID='YuleModelBICEPSEpochAll.t:$(n)'   targetID='mcmc' inputName='operator' if='inposterior(YuleModel.t:$(n)) and Tree.t:$(n)/estimate=true'>Epoch operator that scales all internal nodes for tree t:$(n)</connect>
            <connect srcID='YuleModelBICEPSTreeFlex.t:$(n)'   targetID='mcmc' inputName='operator' if='inposterior(YuleModel.t:$(n)) and Tree.t:$(n)/estimate=true'>Flex operators for all internal nodes for tree t:$(n)</connect>

            <connect srcID='contLikelihood.$(n)'              targetID='tracelog' inputName='log' if='inlikelihood(contLikelihood.$(n))'/>
            <connect srcID='TreeHeight.t:$(n)'                targetID='tracelog' inputName='log' if='inposterior(Tree.t:$(n))  and Tree.t:$(n)/estimate=true'/>
            <connect srcID='clockRate.c:$(n)'                 targetID='tracelog' inputName='log' if='inlikelihood(clockRate.c:$(n)) and clockRate.c:$(n)/estimate=true'/>
            <connect srcID='YuleModel.t:$(n)'                 targetID='tracelog' inputName='log' if='inposterior(YuleModel.t:$(n)) and inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='birthRate.t:$(n)'                 targetID='tracelog' inputName='log' if='inposterior(YuleModel.t:$(n)) and birthRate.t:$(n)/estimate=true'/>
            <connect srcID='varValues.t:$(n)' 		  		  targetID='tracelog' inputName='log' if='inlikelihood(varValues.t:$(n)) and varValues.t:$(n)/estimate=true'/>
            <connect srcID='covValues.t:$(n)' 		  		  targetID='tracelog' inputName='log' if='inlikelihood(covValues.t:$(n)) and covValues.t:$(n)/estimate=true'/>
            <connect srcID='rootValues.t:$(n)' 	              targetID='tracelog' inputName='log' if='inlikelihood(rootValues.t:$(n)) and rootValues.t:$(n)/estimate=true'/>

        </subtemplate>
    </mergewith>

</beast>
